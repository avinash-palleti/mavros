// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file home_position_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _home_position__H_
#define _home_position__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(home_position__SOURCE)
#define home_position__DllAPI __declspec( dllexport )
#else
#define home_position__DllAPI __declspec( dllimport )
#endif // home_position__SOURCE
#else
#define home_position__DllAPI
#endif
#else
#define home_position__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure home_position_ defined by the user in the IDL file.
 * @ingroup HOME_POSITION_
 */
class home_position_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport home_position_();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~home_position_();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object home_position_ that will be copied.
     */
    eProsima_user_DllExport home_position_(const home_position_ &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object home_position_ that will be copied.
     */
    eProsima_user_DllExport home_position_(home_position_ &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object home_position_ that will be copied.
     */
    eProsima_user_DllExport home_position_& operator=(const home_position_ &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object home_position_ that will be copied.
     */
    eProsima_user_DllExport home_position_& operator=(home_position_ &&x);
    
    /*!
     * @brief This function sets a value in member lat
     * @param _lat New value for member lat
     */
    inline eProsima_user_DllExport void lat(double _lat)
    {
        m_lat = _lat;
    }

    /*!
     * @brief This function returns the value of member lat
     * @return Value of member lat
     */
    inline eProsima_user_DllExport double lat() const
    {
        return m_lat;
    }

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    inline eProsima_user_DllExport double& lat()
    {
        return m_lat;
    }
    /*!
     * @brief This function sets a value in member lon
     * @param _lon New value for member lon
     */
    inline eProsima_user_DllExport void lon(double _lon)
    {
        m_lon = _lon;
    }

    /*!
     * @brief This function returns the value of member lon
     * @return Value of member lon
     */
    inline eProsima_user_DllExport double lon() const
    {
        return m_lon;
    }

    /*!
     * @brief This function returns a reference to member lon
     * @return Reference to member lon
     */
    inline eProsima_user_DllExport double& lon()
    {
        return m_lon;
    }
    /*!
     * @brief This function sets a value in member alt
     * @param _alt New value for member alt
     */
    inline eProsima_user_DllExport void alt(float _alt)
    {
        m_alt = _alt;
    }

    /*!
     * @brief This function returns the value of member alt
     * @return Value of member alt
     */
    inline eProsima_user_DllExport float alt() const
    {
        return m_alt;
    }

    /*!
     * @brief This function returns a reference to member alt
     * @return Reference to member alt
     */
    inline eProsima_user_DllExport float& alt()
    {
        return m_alt;
    }
    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    inline eProsima_user_DllExport void x(float _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    inline eProsima_user_DllExport float x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline eProsima_user_DllExport float& x()
    {
        return m_x;
    }
    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    inline eProsima_user_DllExport void y(float _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    inline eProsima_user_DllExport float y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline eProsima_user_DllExport float& y()
    {
        return m_y;
    }
    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    inline eProsima_user_DllExport void z(float _z)
    {
        m_z = _z;
    }

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    inline eProsima_user_DllExport float z() const
    {
        return m_z;
    }

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    inline eProsima_user_DllExport float& z()
    {
        return m_z;
    }
    /*!
     * @brief This function sets a value in member yaw
     * @param _yaw New value for member yaw
     */
    inline eProsima_user_DllExport void yaw(float _yaw)
    {
        m_yaw = _yaw;
    }

    /*!
     * @brief This function returns the value of member yaw
     * @return Value of member yaw
     */
    inline eProsima_user_DllExport float yaw() const
    {
        return m_yaw;
    }

    /*!
     * @brief This function returns a reference to member yaw
     * @return Reference to member yaw
     */
    inline eProsima_user_DllExport float& yaw()
    {
        return m_yaw;
    }
    /*!
     * @brief This function sets a value in member direction_x
     * @param _direction_x New value for member direction_x
     */
    inline eProsima_user_DllExport void direction_x(float _direction_x)
    {
        m_direction_x = _direction_x;
    }

    /*!
     * @brief This function returns the value of member direction_x
     * @return Value of member direction_x
     */
    inline eProsima_user_DllExport float direction_x() const
    {
        return m_direction_x;
    }

    /*!
     * @brief This function returns a reference to member direction_x
     * @return Reference to member direction_x
     */
    inline eProsima_user_DllExport float& direction_x()
    {
        return m_direction_x;
    }
    /*!
     * @brief This function sets a value in member direction_y
     * @param _direction_y New value for member direction_y
     */
    inline eProsima_user_DllExport void direction_y(float _direction_y)
    {
        m_direction_y = _direction_y;
    }

    /*!
     * @brief This function returns the value of member direction_y
     * @return Value of member direction_y
     */
    inline eProsima_user_DllExport float direction_y() const
    {
        return m_direction_y;
    }

    /*!
     * @brief This function returns a reference to member direction_y
     * @return Reference to member direction_y
     */
    inline eProsima_user_DllExport float& direction_y()
    {
        return m_direction_y;
    }
    /*!
     * @brief This function sets a value in member direction_z
     * @param _direction_z New value for member direction_z
     */
    inline eProsima_user_DllExport void direction_z(float _direction_z)
    {
        m_direction_z = _direction_z;
    }

    /*!
     * @brief This function returns the value of member direction_z
     * @return Value of member direction_z
     */
    inline eProsima_user_DllExport float direction_z() const
    {
        return m_direction_z;
    }

    /*!
     * @brief This function returns a reference to member direction_z
     * @return Reference to member direction_z
     */
    inline eProsima_user_DllExport float& direction_z()
    {
        return m_direction_z;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const home_position_& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    double m_lat;
    double m_lon;
    float m_alt;
    float m_x;
    float m_y;
    float m_z;
    float m_yaw;
    float m_direction_x;
    float m_direction_y;
    float m_direction_z;
};

#endif // _home_position__H_