// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file home_position_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "mavconn/home_position_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

home_position_::home_position_()
{
    m_lat = 0.0;
    m_lon = 0.0;
    m_alt = 0.0;
    m_x = 0.0;
    m_y = 0.0;
    m_z = 0.0;
    m_yaw = 0.0;
    m_direction_x = 0.0;
    m_direction_y = 0.0;
    m_direction_z = 0.0;
}

home_position_::~home_position_()
{
}

home_position_::home_position_(const home_position_ &x)
{
    m_lat = x.m_lat;
    m_lon = x.m_lon;
    m_alt = x.m_alt;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_yaw = x.m_yaw;
    m_direction_x = x.m_direction_x;
    m_direction_y = x.m_direction_y;
    m_direction_z = x.m_direction_z;
}

home_position_::home_position_(home_position_ &&x)
{
    m_lat = x.m_lat;
    m_lon = x.m_lon;
    m_alt = x.m_alt;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_yaw = x.m_yaw;
    m_direction_x = x.m_direction_x;
    m_direction_y = x.m_direction_y;
    m_direction_z = x.m_direction_z;
}

home_position_& home_position_::operator=(const home_position_ &x)
{
    m_lat = x.m_lat;
    m_lon = x.m_lon;
    m_alt = x.m_alt;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_yaw = x.m_yaw;
    m_direction_x = x.m_direction_x;
    m_direction_y = x.m_direction_y;
    m_direction_z = x.m_direction_z;
    
    return *this;
}

home_position_& home_position_::operator=(home_position_ &&x)
{
    m_lat = x.m_lat;
    m_lon = x.m_lon;
    m_alt = x.m_alt;
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_yaw = x.m_yaw;
    m_direction_x = x.m_direction_x;
    m_direction_y = x.m_direction_y;
    m_direction_z = x.m_direction_z;
    
    return *this;
}

size_t home_position_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t home_position_::getCdrSerializedSize(const home_position_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void home_position_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_lat;

    scdr << m_lon;

    scdr << m_alt;

    scdr << m_x;

    scdr << m_y;

    scdr << m_z;

    scdr << m_yaw;

    scdr << m_direction_x;

    scdr << m_direction_y;

    scdr << m_direction_z;

}

void home_position_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_lat;
    dcdr >> m_lon;
    dcdr >> m_alt;
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
    dcdr >> m_yaw;
    dcdr >> m_direction_x;
    dcdr >> m_direction_y;
    dcdr >> m_direction_z;
}

size_t home_position_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            











    return current_align;
}

bool home_position_::isKeyDefined()
{
    return false;
}

void home_position_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}
